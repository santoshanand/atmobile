package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

var (
	maketStaus   = "/api/marketStatus"
	topGainers   = "/api/live-analysis-variations?index=gainers&type=FOSec"
	optionStocks = "/api/equity-stock?index=opt_stock"
)
var (
	baseURL         = "https://www.nseindia.com"
	legacyBaseURL   = "https://www1.nseindia.com"
	cookies         = ""
	cookieUsedCount = 0
	cookieMaxAge    = 60 // should be in seconds
	cookieExpiry    = int(time.Now().UnixMilli()) + (cookieMaxAge * 1000)
)

func getNSECookies() ([]*http.Cookie, string) {
	httpCookies := []*http.Cookie{}
	currentTime := int(time.Now().UnixMilli())
	if cookies == "" || cookieUsedCount > 10 || cookieExpiry <= currentTime {

		// make a request to NSE site to get initial cookies
		client := &http.Client{}

		req, err := http.NewRequest("GET", baseURL, nil)
		if err != nil {
			fmt.Println("error, ", err.Error())
		}
		// ...
		req.Header.Add("Accept-Language", `en-US,en;q=0.9`)
		req.Header.Add("Accept-Encoding", `gzip, deflate, br`)
		req.Header.Add("Connection", `keep-alive`)
		req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36")
		resp, err := client.Do(req)

		tempCookies := resp.Header.Values("set-cookie")

		cookiesToSend := []string{}

		for _, v := range tempCookies {
			requiredCookies := []string{"nsit", "nseappid", "ak_bmsc", "AKA_A2"}
			cookieKeyValue := strings.Split(v, ";")[0] // cookie.split(';')[0]
			cookieEntry := strings.Split(cookieKeyValue, "=")

			for _, v := range requiredCookies {
				key := cookieEntry[0]
				if v == key {

					value := cookieKeyValue[len(key)+1:]

					c := &http.Cookie{}
					c.Name = key
					c.Value = value
					httpCookies = append(httpCookies, c)
					cookiesToSend = append(cookiesToSend, cookieKeyValue)
				}
			}

		}

		cookies = strings.Join(cookiesToSend, "; ")
		cookieUsedCount = 0
		cookieExpiry = int(time.Now().UnixMilli()) + (cookieMaxAge * 1000)

	}
	cookieUsedCount++
	return httpCookies, cookies
}

func getData(url string) {
	client := &http.Client{}
	httpURL := fmt.Sprintf("%s%s", baseURL, url)
	req, err := http.NewRequest("GET", httpURL, nil)
	if err != nil {
		fmt.Println("error, ", err.Error())
	}
	// ...
	req.Header.Add("Accept-Language", `en-US,en;q=0.9`)
	// req.Header.Add("Accept-Encoding", `gzip, deflate, br`)
	req.Header.Add("Connection", `keep-alive`)
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36")

	cookies, _ := getNSECookies()

	for _, cookie := range cookies {
		req.AddCookie(cookie)
	}

	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("error ", err.Error())
	}
	defer resp.Body.Close()
	resBody, err := ioutil.ReadAll(resp.Body)
	sb := string(resBody)
	fmt.Println(sb)
}

func main() {
	getData(optionStocks)
}
